{"ast":null,"code":"var _jsxFileName = \"D:\\\\Code Projects\\\\SecureCloud\\\\frontend\\\\src\\\\pages\\\\DashboardPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DashboardPage = () => {\n  _s();\n  const [files, setFiles] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Fetch decentralized files (mock for now)\n    const fetchFiles = async () => {\n      try {\n        const response = await axios.get(\"http://127.0.0.1:5000/dashboard\"); // Add this endpoint in your backend\n        setFiles(response.data.files);\n        setLoading(false);\n      } catch (error) {\n        console.error(\"Error fetching files:\", error);\n      }\n    };\n    fetchFiles();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Decentralized Files\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading files...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: files.map(file => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: file.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: file.chunks.map((chunk, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"Node: \", chunk.node, \" | IPFS Hash: \", chunk.hash]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 15\n        }, this)]\n      }, file.name, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n_s(DashboardPage, \"zMnqggxtwlDmTOERg77mrfWXT00=\");\n_c = DashboardPage;\nexport default DashboardPage;\nvar _c;\n$RefreshReg$(_c, \"DashboardPage\");","map":{"version":3,"names":["React","useEffect","useState","axios","jsxDEV","_jsxDEV","DashboardPage","_s","files","setFiles","loading","setLoading","fetchFiles","response","get","data","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","map","file","name","chunks","chunk","index","node","hash","_c","$RefreshReg$"],"sources":["D:/Code Projects/SecureCloud/frontend/src/pages/DashboardPage.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst DashboardPage = () => {\r\n  const [files, setFiles] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Fetch decentralized files (mock for now)\r\n    const fetchFiles = async () => {\r\n      try {\r\n        const response = await axios.get(\"http://127.0.0.1:5000/dashboard\"); // Add this endpoint in your backend\r\n        setFiles(response.data.files);\r\n        setLoading(false);\r\n      } catch (error) {\r\n        console.error(\"Error fetching files:\", error);\r\n      }\r\n    };\r\n\r\n    fetchFiles();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <h2>Decentralized Files</h2>\r\n      {loading ? (\r\n        <p>Loading files...</p>\r\n      ) : (\r\n        <ul>\r\n          {files.map((file) => (\r\n            <li key={file.name}>\r\n              <strong>{file.name}</strong>\r\n              <ul>\r\n                {file.chunks.map((chunk, index) => (\r\n                  <li key={index}>\r\n                    Node: {chunk.node} | IPFS Hash: {chunk.hash}\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DashboardPage;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAE5CD,SAAS,CAAC,MAAM;IACd;IACA,MAAMW,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMV,KAAK,CAACW,GAAG,CAAC,iCAAiC,CAAC,CAAC,CAAC;QACrEL,QAAQ,CAACI,QAAQ,CAACE,IAAI,CAACP,KAAK,CAAC;QAC7BG,UAAU,CAAC,KAAK,CAAC;MACnB,CAAC,CAAC,OAAOK,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC/C;IACF,CAAC;IAEDJ,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEP,OAAA;IAAAa,QAAA,gBACEb,OAAA;MAAAa,QAAA,EAAI;IAAmB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAC3BZ,OAAO,gBACNL,OAAA;MAAAa,QAAA,EAAG;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,gBAEvBjB,OAAA;MAAAa,QAAA,EACGV,KAAK,CAACe,GAAG,CAAEC,IAAI,iBACdnB,OAAA;QAAAa,QAAA,gBACEb,OAAA;UAAAa,QAAA,EAASM,IAAI,CAACC;QAAI;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAS,CAAC,eAC5BjB,OAAA;UAAAa,QAAA,EACGM,IAAI,CAACE,MAAM,CAACH,GAAG,CAAC,CAACI,KAAK,EAAEC,KAAK,kBAC5BvB,OAAA;YAAAa,QAAA,GAAgB,QACR,EAACS,KAAK,CAACE,IAAI,EAAC,gBAAc,EAACF,KAAK,CAACG,IAAI;UAAA,GADpCF,KAAK;YAAAT,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAEV,CACL;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACA,CAAC;MAAA,GAREE,IAAI,CAACC,IAAI;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OASd,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CACL;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACf,EAAA,CA1CID,aAAa;AAAAyB,EAAA,GAAbzB,aAAa;AA4CnB,eAAeA,aAAa;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}